{"version":3,"sources":["components/BackgroundStyle/BackgroundStyle.tsx","components/JokePresenter/JokePresenter.tsx","services/BackendService.ts","components/App/App.tsx","serviceWorker.ts","index.tsx"],"names":["BackgroundStyle","children","useState","color","setColor","luminosity","setLuminosity","useEffect","red","Math","floor","random","green","blue","round","className","style","backgroundColor","JokePresenter","joke","showPunchline","setShowPunchline","onClick","setup","punchline","BackendService","fetch","process","res","status","json","result","JSON","parse","contents","console","log","this","requestJokeFile","jokeList","length","App","backendService","setJoke","getRandomJoke","then","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"2LA4BeA,G,MAzBmB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EACxBC,mBAAS,sBADe,mBAC3CC,EAD2C,KACpCC,EADoC,OAEdF,mBAAS,KAFK,mBAE3CG,EAF2C,KAE/BC,EAF+B,KAelD,OAXAC,qBAAU,WACR,IAAMC,EAAMC,KAAKC,MAAsB,IAAhBD,KAAKE,UACtBC,EAAQH,KAAKC,MAAsB,IAAhBD,KAAKE,UACxBE,EAAOJ,KAAKC,MAAsB,IAAhBD,KAAKE,UACvBN,EAAaI,KAAKK,OAAc,IAANN,EAAsB,IAARI,EAAuB,IAAPC,GAAe,KACvEV,EAAK,cAAUK,EAAV,YAAiBI,EAAjB,YAA0BC,EAA1B,KAEXT,EAASD,GACTG,EAAcD,KACb,IAGD,yBAAKU,UAAS,2BAAuBV,GAAc,IAAM,WAAa,aACpEW,MAAO,CACLC,gBAAiBd,IAEjBF,KCIOiB,G,MAvBqC,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAAW,EACtBjB,oBAAS,GADa,mBACzDkB,EADyD,KAC1CC,EAD0C,KAQhE,OACA,yBAAKN,UAAU,eACbO,QAAS,WANLH,GACFE,GAAiB,KAMnB,yBAAKN,UAAU,YACb,uBAAGA,UAAS,qBAAiBI,EAAmB,GAAZ,YAChCA,GAAQA,EAAKI,OAEjB,uBAAGR,UAAS,yBAAoBK,EAAgB,OAAS,KACrDD,GAAQA,EAAKK,e,qCCwBRC,E,iPAtCOC,MAAM,sCAAD,OAAuCC,yCAAvC,gB,UAEF,OAFfC,E,QAEIC,O,iCACeD,EAAIE,O,cAAnBC,E,iBACOC,KAAKC,MAAMF,EAAOG,U,0EAE1B,M,yCAGPC,QAAQC,IAAR,M,kBACO,M,mSAMSV,MAAM,sCAAD,OAAuCC,wF,UAEzC,OAFfC,E,QAEIC,O,iCACeD,EAAIE,O,cAAnBC,E,iBACOC,KAAKC,MAAMF,EAAOG,U,0EAE1B,M,yCAGPC,QAAQC,IAAR,M,kBACO,M,sRAKcC,KAAKC,kB,UAAtBC,E,gDAEG,M,gCACFA,EAAS9B,KAAKC,MAAMD,KAAKE,SAAW4B,EAASC,U,6GCjBzCC,MAjBf,WACE,IAAMC,EAAiB,IAAIjB,EADd,EAEWvB,mBAAoB,MAF/B,mBAENiB,EAFM,KAEAwB,EAFA,KAUb,OANApC,qBAAU,WACRmC,EAAeE,gBAAgBC,MAAK,SAAAjB,GAClCe,EAAQf,QAET,IAGD,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAeT,KAAMA,MCNP2B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDkIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBb,MAAK,SAAAc,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3B,QAAQ2B,MAAMA,EAAMC,a","file":"static/js/main.ab0a4816.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport './BackgroundStyle.scss';\r\n\r\nconst BackgroundStyle: React.FC = ({ children }) => {\r\n  const [color, setColor] = useState('rgb(255, 255, 255)');\r\n  const [luminosity, setLuminosity] = useState(255);\r\n\r\n  useEffect(() => {\r\n    const red = Math.floor(Math.random() * 255);\r\n    const green = Math.floor(Math.random() * 255);\r\n    const blue = Math.floor(Math.random() * 255);\r\n    const luminosity = Math.round(((red * 299) + (green * 587) + (blue * 114)) / 1000);\r\n    const color = `rgb(${red},${green},${blue})`;\r\n\r\n    setColor(color);\r\n    setLuminosity(luminosity);\r\n  }, []);\r\n\r\n  return (\r\n    <div className={`background-style ${ luminosity <= 125 ? 'too-dark' : 'too-light' }`}\r\n      style={{\r\n        backgroundColor: color\r\n      }}>\r\n      { children }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default BackgroundStyle;\r\n","import React, {useState} from 'react';\r\nimport { JokePresenterProps } from './JokePresenter.types';\r\nimport './JokePresenter.scss';\r\n\r\nconst JokePresenter: React.FC<JokePresenterProps> = ({ joke }) => {\r\n  const [showPunchline, setShowPunchline] = useState(false);\r\n\r\n  const handlePunchline = () => {\r\n    if (joke)\r\n      setShowPunchline(true);\r\n  }\r\n\r\n  return (\r\n  <div className=\"joke-wrapper\"\r\n    onClick={() => handlePunchline()}>\r\n    <div className=\"joke-col\">\r\n      <p className={`joke setup ${!joke ? 'preload' : ''}`}>\r\n        { joke && joke.setup }\r\n      </p>\r\n      <p className={`joke punchline ${showPunchline ? 'show' : ''}`}> \r\n        { joke && joke.punchline } \r\n      </p>\r\n    </div>\r\n  </div>\r\n  );\r\n}\r\n\r\nexport default JokePresenter;\r\n","import { Joke } from '../types/Joke';\r\n\r\nclass BackendService {\r\n\r\n  async requestJoke() : Promise<Joke | null> {\r\n    try {\r\n      let res = await fetch(`https://api.allorigins.win/get?url=${process.env.REACT_APP_BACKEND_API}random_joke`);      \r\n\r\n      if (res.status === 200) {\r\n        const result = await res.json();        \r\n        return await JSON.parse(result.contents);\r\n      }\r\n      return null;\r\n\r\n    } catch (err) {\r\n      console.log(err);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  async requestJokeFile() : Promise<Joke[] | null> {\r\n    try {\r\n      let res = await fetch(`https://api.allorigins.win/get?url=${process.env.REACT_APP_GITHUB_JOKES_SOURCE}`);\r\n\r\n      if (res.status === 200) {\r\n        const result = await res.json();        \r\n        return await JSON.parse(result.contents);\r\n      }\r\n      return null;\r\n\r\n    } catch (err) {\r\n      console.log(err);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  async getRandomJoke() : Promise<Joke | null> {\r\n    const jokeList = await this.requestJokeFile();\r\n    if (!jokeList) \r\n      return null;\r\n    return jokeList[Math.floor(Math.random() * jokeList.length)];\r\n  }\r\n}\r\n\r\nexport default BackendService;\r\n","import React, { useEffect, useState } from 'react';\r\nimport BackgroundStyle from '../BackgroundStyle/BackgroundStyle';\r\nimport JokePresenter from '../JokePresenter/JokePresenter';\r\nimport { Joke } from \"../../types/Joke\";\r\nimport BackendService from '../../services/BackendService';\r\n\r\nfunction App() {\r\n  const backendService = new BackendService();\r\n  const [joke, setJoke] = useState<Joke|null>(null);\r\n\r\n  useEffect(() => {\r\n    backendService.getRandomJoke().then(res => {\r\n      setJoke(res);\r\n    })\r\n  }, [])\r\n\r\n  return (\r\n    <BackgroundStyle>\r\n      <JokePresenter joke={joke} />\r\n    </BackgroundStyle>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './components/App/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}