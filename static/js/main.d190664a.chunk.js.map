{"version":3,"sources":["components/BackgroundStyle/BackgroundStyle.tsx","components/JokePresenter/JokePresenter.tsx","services/BackendService.ts","components/App/App.tsx","serviceWorker.ts","index.tsx"],"names":["BackgroundStyle","children","useState","color","setColor","luminosity","setLuminosity","useEffect","red","Math","floor","random","green","blue","round","className","style","backgroundColor","JokePresenter","joke","showPunchline","setShowPunchline","onClick","setup","punchline","BackendService","fetch","process","method","headers","res","status","json","console","log","App","backendService","setJoke","requestJoke","then","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"2LA4BeA,G,MAzBmB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EACxBC,mBAAS,sBADe,mBAC3CC,EAD2C,KACpCC,EADoC,OAEdF,mBAAS,KAFK,mBAE3CG,EAF2C,KAE/BC,EAF+B,KAelD,OAXAC,qBAAU,WACR,IAAMC,EAAMC,KAAKC,MAAsB,IAAhBD,KAAKE,UACtBC,EAAQH,KAAKC,MAAsB,IAAhBD,KAAKE,UACxBE,EAAOJ,KAAKC,MAAsB,IAAhBD,KAAKE,UACvBN,EAAaI,KAAKK,OAAc,IAANN,EAAsB,IAARI,EAAuB,IAAPC,GAAe,KACvEV,EAAK,cAAUK,EAAV,YAAiBI,EAAjB,YAA0BC,EAA1B,KAEXT,EAASD,GACTG,EAAcD,KACb,IAGD,yBAAKU,UAAS,2BAAuBV,GAAc,IAAM,WAAa,aACpEW,MAAO,CACLC,gBAAiBd,IAEjBF,KCIOiB,G,MAvBqC,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAAW,EACtBjB,oBAAS,GADa,mBACzDkB,EADyD,KAC1CC,EAD0C,KAQhE,OACA,yBAAKN,UAAU,eACbO,QAAS,WANLH,GACFE,GAAiB,KAMnB,yBAAKN,UAAU,YACb,uBAAGA,UAAS,qBAAiBI,EAAmB,GAAZ,YAChCA,GAAQA,EAAKI,OAEjB,uBAAGR,UAAS,yBAAoBK,EAAgB,OAAS,KACrDD,GAAQA,EAAKK,e,qCCKRC,E,+OAnBOC,MAAM,GAAD,OAAIC,yCAAJ,gBAAqD,CACxEC,OAAQ,MACRC,QAAS,CACP,eAAgB,sB,UAID,OAPfC,E,QAOIC,O,gCACOD,EAAIE,O,wEAEZ,M,yCAGPC,QAAQC,IAAR,M,kBACO,M,uHCGEC,MAjBf,WACE,IAAMC,EAAiB,IAAIX,EADd,EAEWvB,mBAAoB,MAF/B,mBAENiB,EAFM,KAEAkB,EAFA,KAUb,OANA9B,qBAAU,WACR6B,EAAeE,cAAcC,MAAK,SAAAT,GAChCO,EAAQP,QAET,IAGD,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAeX,KAAMA,MCNPqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDkIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBb,MAAK,SAAAc,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvB,QAAQuB,MAAMA,EAAMC,a","file":"static/js/main.d190664a.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport './BackgroundStyle.scss';\r\n\r\nconst BackgroundStyle: React.FC = ({ children }) => {\r\n  const [color, setColor] = useState('rgb(255, 255, 255)');\r\n  const [luminosity, setLuminosity] = useState(255);\r\n\r\n  useEffect(() => {\r\n    const red = Math.floor(Math.random() * 255);\r\n    const green = Math.floor(Math.random() * 255);\r\n    const blue = Math.floor(Math.random() * 255);\r\n    const luminosity = Math.round(((red * 299) + (green * 587) + (blue * 114)) / 1000);\r\n    const color = `rgb(${red},${green},${blue})`;\r\n\r\n    setColor(color);\r\n    setLuminosity(luminosity);\r\n  }, []);\r\n\r\n  return (\r\n    <div className={`background-style ${ luminosity <= 125 ? 'too-dark' : 'too-light' }`}\r\n      style={{\r\n        backgroundColor: color\r\n      }}>\r\n      { children }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default BackgroundStyle;\r\n","import React, {useState} from 'react';\r\nimport { JokePresenterProps } from './JokePresenter.types';\r\nimport './JokePresenter.scss';\r\n\r\nconst JokePresenter: React.FC<JokePresenterProps> = ({ joke }) => {\r\n  const [showPunchline, setShowPunchline] = useState(false);\r\n\r\n  const handlePunchline = () => {\r\n    if (joke)\r\n      setShowPunchline(true);\r\n  }\r\n\r\n  return (\r\n  <div className=\"joke-wrapper\"\r\n    onClick={() => handlePunchline()}>\r\n    <div className=\"joke-col\">\r\n      <p className={`joke setup ${!joke ? 'preload' : ''}`}>\r\n        { joke && joke.setup }\r\n      </p>\r\n      <p className={`joke punchline ${showPunchline ? 'show' : ''}`}> \r\n        { joke && joke.punchline } \r\n      </p>\r\n    </div>\r\n  </div>\r\n  );\r\n}\r\n\r\nexport default JokePresenter;\r\n","import { Joke } from '../types/Joke';\r\n\r\nclass BackendService {\r\n\r\n  async requestJoke() : Promise<Joke | null> {\r\n    try {\r\n      let res = await fetch(`${process.env.REACT_APP_BACKEND_API}jokes/random`, {\r\n        method: 'GET',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        }\r\n      });      \r\n\r\n      if (res.status === 200) {\r\n        return await res.json();\r\n      }\r\n      return null;\r\n\r\n    } catch (err) {\r\n      console.log(err);\r\n      return null;\r\n    }\r\n  }\r\n}\r\n\r\nexport default BackendService;\r\n","import React, { useEffect, useState } from 'react';\nimport BackgroundStyle from '../BackgroundStyle/BackgroundStyle';\nimport JokePresenter from '../JokePresenter/JokePresenter';\nimport { Joke } from \"../../types/Joke\";\nimport BackendService from '../../services/BackendService';\n\nfunction App() {\n  const backendService = new BackendService();\n  const [joke, setJoke] = useState<Joke|null>(null);\n\n  useEffect(() => {\n    backendService.requestJoke().then(res => {\n      setJoke(res);\n    })\n  }, [])\n\n  return (\n    <BackgroundStyle>\n      <JokePresenter joke={joke} />\n    </BackgroundStyle>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}